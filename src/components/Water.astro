<div class="animation-container">
    <canvas id="waterCanvas" aria-label="Nandan Varma"></canvas>
</div>

<style>
    .animation-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: -1;
    }
    canvas {
        display: block;
        width: 100%;
        height: 100%;
    }
</style>

<script>
    function animateWater() {
        document.addEventListener("astro:page-load", () => {
            const canvas = document.getElementById(
                "waterCanvas",
            ) as HTMLCanvasElement | null;
            if (!canvas) {
                return;
            }
            const ctx = canvas.getContext("2d", { willReadFrequently: true });

            // Set canvas dimensions
            let waterLevel = canvas.height;

            const setCanvasDimensions = () => {
                canvas.width = window.innerWidth;
                canvas.height = window.outerHeight;
                waterLevel = canvas.height;
            };

            setCanvasDimensions();
            window.addEventListener("resize", setCanvasDimensions);

            // Animation variables
            const dropletRadius = 10;
            const gravity = 0.3;
            const perspectiveRatio = 0.4; // Vertical compression for perspective
            
            // Time-based animation variables
            let lastFrameTime = performance.now();
            const targetFPS = 60;
            const frameTime = 1000 / targetFPS; // Target frame time in milliseconds
            
            let splashParticles: {
                x: number;
                y: number;
                radius: number;
                opacity: number;
                vx: number;
                vy: number;
                gravity: number;
            }[] = [];
            let ripples: {
                x: number;
                y: number;
                radius: number;
                opacity: number;
                speed: number;
            }[] = [];

            // Droplet management
            const droplets: {
                x: number;
                y: number;
                radius: number;
                velocity: number;
                opacity: number;
            }[] = [];
            // default values
            const maxDroplets = canvas.width / 5; // Maximum number of droplets
            const dropletSpawnRate = 0.01; // Chance of spawning a droplet per millisecond

            // Text variables
            const text = "Nandan Varma";
            let textPixels: { x: number; y: number }[] = [];
            let textBounds = { left: 0, right: 0, top: 0, bottom: 0 };

            // Generate text pixel data for collision detection
            function generateTextPixels() {
                if (!ctx || !canvas) {
                    return;
                }
                // Set text style
                const fontSize = Math.min(canvas.width / 10, 72); // Adjust font size based on canvas width
                ctx.font = `bold ${fontSize}px Arial`;
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";

                // Measure text
                const metrics = ctx.measureText(text);
                const textWidth = metrics.width;
                const textHeight = fontSize; // Approximate height based on font size

                // Clear canvas temporarily to draw text for pixel detection
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = "white";
                ctx.fillText(text, canvas.width / 2, canvas.height / 2);

                if (canvas.width === 0 || canvas.height === 0) {
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                    waterLevel = canvas.height;
                }

                // Get image data
                const imageData = ctx.getImageData(
                    0,
                    0,
                    canvas.width,
                    canvas.height,
                );
                const data = imageData.data;

                // Reset textPixels
                textPixels = [];

                // Calculate text boundaries
                textBounds = {
                    left: canvas.width / 2 - textWidth / 2,
                    right: canvas.width / 2 + textWidth / 2,
                    top: canvas.height / 2 - textHeight / 2,
                    bottom: canvas.height / 2 + textHeight / 2,
                };

                // Store pixel positions where text exists
                for (let y = 0; y < canvas.height; y++) {
                    for (let x = 0; x < canvas.width; x++) {
                        const index = (y * canvas.width + x) * 4;
                        // If pixel is not transparent (part of the text)
                        if (data[index + 3] > 0) {
                            textPixels.push({ x, y });
                        }
                    }
                }

                // Clear canvas again
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }

            // Call once to initialize
            generateTextPixels();

            // Handle window resize
            window.addEventListener("resize", () => {
                setCanvasDimensions();
                generateTextPixels();
            });

            // Check if a point collides with text
            function checkTextCollision(x: number, y: number, radius: number) {
                // Quick boundary check first
                if (
                    x + radius < textBounds.left ||
                    x - radius > textBounds.right ||
                    y + radius < textBounds.top ||
                    y - radius > textBounds.bottom
                ) {
                    return false;
                }

                // Check against actual pixels
                for (const pixel of textPixels) {
                    const dx = x - pixel.x;
                    const dy = y - pixel.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    if (distance < radius) {
                        return { x: pixel.x, y: pixel.y };
                    }
                }

                return false;
            }

            // Create a new droplet
            function createDroplet(deltaTime: number) {
                if (!ctx || !canvas) {
                    return;
                }

                if (
                    droplets.length < maxDroplets &&
                    Math.random() < dropletSpawnRate * deltaTime
                ) {
                    const x = Math.random() * canvas.width;
                    droplets.push({
                        x: x,
                        y: -20,
                        radius: 2 + Math.random() * 3,
                        velocity: 0,
                        opacity: 0.8 + Math.random() * 0.2,
                    });
                }
            }

            // Create splash particles at a point
            function createSplashAtPoint(x: number, y: number) {
                // Create splash particles at collision point
                for (let i = 0; i < 12; i++) {
                    const angle = (Math.PI * 2 * i) / 12;
                    const speed = 1 + Math.random() * 3;
                    splashParticles.push({
                        x: x + Math.cos(angle) * 5,
                        y: y + Math.sin(angle) * 5,
                        radius: 1 + Math.random() * 2,
                        opacity: 0.8,
                        vx: Math.cos(angle) * speed,
                        vy: Math.sin(angle) * speed,
                        gravity: 0.1,
                    });
                }
            }

            // Create ripple at water level
            function createRipple(
                x: number,
                radius: number,
                opacity: number = 1,
            ) {
                ripples.push({
                    x: x,
                    y: waterLevel,
                    radius: radius,
                    opacity: opacity,
                    speed: 2 + Math.random() * 0.5,
                });
            }

            // Animation loop
            function animate(currentTime: number = performance.now()) {
                if (!ctx || !canvas) {
                    return;
                }
                
                // Calculate delta time
                const deltaTime = currentTime - lastFrameTime;
                lastFrameTime = currentTime;
                
                // Normalize delta time to target FPS
                const normalizedDelta = deltaTime / frameTime;
                
                // Clear canvas
                ctx.fillStyle = "black";
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                // Draw water surface with perspective
                drawWaterSurface();

                // Possibly create a new droplet
                createDroplet(deltaTime);

                // Update and draw droplets
                updateDroplets(normalizedDelta);

                // Update and draw splash particles
                updateSplashParticles(normalizedDelta);

                // Update and draw ripples
                updateRipples(normalizedDelta);

                // Draw the text
                drawText();

                requestAnimationFrame(animate);
            }

            function drawWaterSurface() {
                if (!ctx || !canvas) {
                    return;
                }
                // Draw water surface with grid to show perspective
                ctx.fillStyle = "rgba(255, 255, 255, 0.1)";
                ctx.fillRect(
                    0,
                    waterLevel,
                    canvas.width,
                    canvas.height - waterLevel,
                );

                // Draw perspective grid on water
                const gridSize = 40;
                ctx.strokeStyle = "rgba(255, 255, 255, 0.15)";
                ctx.lineWidth = 0.5;

                // Horizontal lines with perspective
                for (let y = 0; y < canvas.height - waterLevel; y += gridSize) {
                    ctx.beginPath();
                    for (let x = 0; x < canvas.width; x += 2) {
                        // Add wave effect to grid based on ripples
                        let waveOffset = 0;
                        ripples.forEach((ripple) => {
                            const dx = x - ripple.x;
                            const dy = waterLevel + y - ripple.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            if (
                                distance < ripple.radius &&
                                distance > ripple.radius - 30
                            ) {
                                const intensity =
                                    1 - (ripple.radius - distance) / 30;
                                waveOffset +=
                                    Math.sin(distance * 0.2) *
                                    intensity *
                                    3 *
                                    ripple.opacity;
                            }
                        });

                        const yPos = waterLevel + y + waveOffset;

                        if (x === 0) {
                            ctx.moveTo(x, yPos);
                        } else {
                            ctx.lineTo(x, yPos);
                        }
                    }
                    ctx.stroke();
                }

                // Vertical lines with perspective
                for (let x = 0; x < canvas.width; x += gridSize) {
                    ctx.beginPath();
                    for (let y = 0; y < canvas.height - waterLevel; y += 2) {
                        // Add wave effect to grid based on ripples
                        let waveOffset = 0;
                        ripples.forEach((ripple) => {
                            const dx = x - ripple.x;
                            const dy = waterLevel + y - ripple.y;
                            const distance = Math.sqrt(dx * dx + dy * dy);
                            if (
                                distance < ripple.radius &&
                                distance > ripple.radius - 30
                            ) {
                                const intensity =
                                    1 - (ripple.radius - distance) / 30;
                                waveOffset +=
                                    Math.sin(distance * 0.2) *
                                    intensity *
                                    2 *
                                    ripple.opacity;
                            }
                        });

                        const xPos = x + waveOffset;

                        if (y === 0) {
                            ctx.moveTo(xPos, waterLevel + y);
                        } else {
                            ctx.lineTo(xPos, waterLevel + y);
                        }
                    }
                    ctx.stroke();
                }
            }

            function updateDroplets(deltaMultiplier: number) {
                if (!ctx || !canvas) {
                    return;
                }
                for (let i = 0; i < droplets.length; i++) {
                    const droplet = droplets[i];

                    // Apply gravity with delta time
                    droplet.velocity += gravity * deltaMultiplier;
                    droplet.y += droplet.velocity * deltaMultiplier;

                    // Draw shadow on water surface
                    //   if (droplet.y < waterLevel) {
                    //     const shadowSize = droplet.radius * (1 - (droplet.y / waterLevel) * 0.5);
                    //     const shadowY = waterLevel;

                    //     ctx.beginPath();
                    //     ctx.ellipse(
                    //       droplet.x,
                    //       shadowY,
                    //       shadowSize * 1.2,
                    //       shadowSize * perspectiveRatio,
                    //       0, 0, Math.PI * 2
                    //     );
                    //     const shadowOpacity = 0.3 * (1 - (droplet.y / waterLevel) * 0.8);
                    //     ctx.fillStyle = `rgba(255, 255, 255, ${shadowOpacity})`;
                    //     ctx.fill();
                    //   }

                    // Draw droplet
                    ctx.beginPath();
                    ctx.arc(
                        droplet.x,
                        droplet.y,
                        droplet.radius,
                        0,
                        Math.PI * 2,
                    );

                    // Create gradient for droplet
                    const dropGradient = ctx.createRadialGradient(
                        droplet.x - 3,
                        droplet.y - 3,
                        1,
                        droplet.x,
                        droplet.y,
                        droplet.radius,
                    );
                    dropGradient.addColorStop(0, "white");
                    dropGradient.addColorStop(
                        1,
                        `rgba(200, 200, 200, ${droplet.opacity})`,
                    );

                    ctx.fillStyle = dropGradient;
                    ctx.fill();

                    // Add highlight
                    ctx.beginPath();
                    ctx.arc(
                        droplet.x - droplet.radius * 0.3,
                        droplet.y - droplet.radius * 0.3,
                        droplet.radius * 0.2,
                        0,
                        Math.PI * 2,
                    );
                    ctx.fillStyle = `rgba(255, 255, 255, ${droplet.opacity})`;
                    ctx.fill();

                    // Check for collision with text
                    const collision = checkTextCollision(
                        droplet.x,
                        droplet.y,
                        droplet.radius,
                    );
                    if (collision) {
                        // Create splash at collision point
                        createSplashAtPoint(collision.x, collision.y);

                        // Remove this droplet
                        droplets.splice(i, 1);
                        i--;
                        continue;
                    }

                    // Check for impact with water
                    if (droplet.y + droplet.radius >= waterLevel) {
                        // Create ripple at water level
                        createRipple(
                            droplet.x,
                            droplet.radius,
                            droplet.opacity,
                        );

                        // Remove this droplet
                        droplets.splice(i, 1);
                        i--;
                    }
                }
            }

            function updateSplashParticles(deltaMultiplier: number) {
                if (!ctx || !canvas) {
                    return;
                }
                for (let i = 0; i < splashParticles.length; i++) {
                    const particle = splashParticles[i];

                    // Update position with delta time
                    particle.x += particle.vx * deltaMultiplier;
                    particle.y += particle.vy * deltaMultiplier;
                    particle.vy += particle.gravity * deltaMultiplier;

                    // Check for collision with text
                    const collision = checkTextCollision(
                        particle.x,
                        particle.y,
                        particle.radius,
                    );
                    if (collision) {
                        // Bounce off text
                        particle.vx *= -0.5;
                        particle.vy *= -0.5;

                        // Reduce opacity faster
                        particle.opacity *= 0.8;
                    }

                    // Draw particle
                    ctx.beginPath();
                    ctx.arc(
                        particle.x,
                        particle.y,
                        particle.radius,
                        0,
                        Math.PI * 2,
                    );
                    ctx.fillStyle = `rgba(255, 255, 255, ${particle.opacity})`;
                    ctx.fill();

                    // Fade out with delta time
                    particle.opacity -= 0.02 * deltaMultiplier;

                    // Remove faded particles
                    if (particle.opacity <= 0) {
                        splashParticles.splice(i, 1);
                        i--;
                    }
                }
            }

            function updateRipples(deltaMultiplier: number) {
                if (!ctx || !canvas) {
                    return;
                }
                for (let i = 0; i < ripples.length; i++) {
                    const ripple = ripples[i];

                    // Check for collision with text before drawing
                    let collided = false;

                    // Only check collision if ripple is expanding
                    if (ripple.radius > dropletRadius * 2) {
                        // Check multiple points around the ripple circumference
                        for (
                            let angle = 0;
                            angle < Math.PI * 2;
                            angle += Math.PI / 8
                        ) {
                            const checkX =
                                ripple.x + Math.cos(angle) * ripple.radius;
                            const checkY =
                                ripple.y + Math.sin(angle) * ripple.radius;

                            const collision = checkTextCollision(
                                checkX,
                                checkY,
                                2,
                            );
                            if (collision) {
                                collided = true;
                                // Create splash at collision point occasionally
                                if (Math.random() < 0.1) {
                                    createSplashAtPoint(
                                        collision.x,
                                        collision.y,
                                    );
                                }
                                break;
                            }
                        }
                    }

                    // Draw ripple with perspective (ellipse instead of circle)
                    ctx.beginPath();
                    ctx.ellipse(
                        ripple.x,
                        ripple.y,
                        ripple.radius,
                        ripple.radius * perspectiveRatio,
                        0,
                        0,
                        Math.PI * 2,
                    );

                    // Create gradient for ripple
                    const rippleGradient = ctx.createRadialGradient(
                        ripple.x,
                        ripple.y,
                        ripple.radius * 0.7,
                        ripple.x,
                        ripple.y,
                        ripple.radius,
                    );
                    rippleGradient.addColorStop(0, `rgba(255, 255, 255, 0)`);
                    rippleGradient.addColorStop(
                        0.5,
                        `rgba(255, 255, 255, ${ripple.opacity * 0.3})`,
                    );
                    rippleGradient.addColorStop(
                        1,
                        `rgba(255, 255, 255, ${ripple.opacity})`,
                    );

                    ctx.strokeStyle = rippleGradient;
                    ctx.lineWidth = 1.5;

                    // Add glow effect
                    ctx.shadowColor = "white";
                    ctx.shadowBlur = 5;
                    ctx.shadowOffsetX = 0;
                    ctx.shadowOffsetY = 0;

                    ctx.stroke();
                    ctx.shadowBlur = 0;

                    // Update ripple with delta time
                    ripple.radius += ripple.speed * deltaMultiplier;
                    // Fade out faster as they get larger or if collided
                    ripple.opacity -=
                        (0.005 + ripple.radius / 500 + (collided ? 0.02 : 0)) * deltaMultiplier;

                    // Remove faded ripples
                    if (ripple.opacity <= 0) {
                        ripples.splice(i, 1);
                        i--;
                    }
                }
            }

            function drawText() {
                if (!ctx || !canvas) {
                    return;
                }
                // Set text style
                const fontSize = Math.min(canvas.width / 10, 72); // Adjust font size based on canvas width
                ctx.font = `bold ${fontSize}px Arial`;
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";

                // Create gradient for text
                const gradient = ctx.createLinearGradient(
                    textBounds.left,
                    textBounds.top,
                    textBounds.right,
                    textBounds.bottom,
                );
                gradient.addColorStop(0, "rgba(255, 255, 255, 0.9)");
                gradient.addColorStop(1, "rgba(200, 200, 200, 0.8)");

                // Draw text with shadow for depth
                ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
                ctx.shadowBlur = 5;
                ctx.shadowOffsetX = 3;
                ctx.shadowOffsetY = 3;

                ctx.fillStyle = gradient;
                ctx.fillText(text, canvas.width / 2, canvas.height / 2);

                // Reset shadow
                ctx.shadowBlur = 0;
                ctx.shadowOffsetX = 0;
                ctx.shadowOffsetY = 0;
            }

            animate();
        });
    }
    
    animateWater();
</script>
