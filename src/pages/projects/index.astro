---
import { getCollection } from "astro:content";
import Navigation from "../../components/Navigation.astro";
import "../../styles/global.css";
import ProjectCard from "@/components/ProjectCard.astro";
import Article from "@/components/Article.astro";
import BaseHead from "@/components/BaseHead.astro";

const projects = (await getCollection("project"))
	.sort((a, b) => Date.parse(b.data.date) - Date.parse(a.data.date))
	.map((post) => post);

const featured = projects.find((project) => project.data.title === "Replog");
const top2 = projects.find((project) => project.data.title === "Friday");
const top3 = projects.find((project) => project.data.title === "Productivity");

const sorted = projects.sort((a, b) => {
	if (a.data.date && b.data.date) {
		return (
			new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
		);
	}
	return 0;
});

// remove featured top2 top3 project from sorted list
if (featured) sorted.splice(sorted.indexOf(featured), 1);
if (top2) sorted.splice(sorted.indexOf(top2), 1);
if (top3) sorted.splice(sorted.indexOf(top3), 1);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={"Projects"} description={"Projects"} />
	</head>
	<body class="bg-gradient-to-tl from-black via-neutral-900 to-black">
		<Navigation />
		<div class="relative pb-16">
			<div
				class="px-6 pt-16 mx-auto space-y-8 max-w-7xl lg:px-8 md:space-y-16 md:pt-24 lg:pt-32"
			>
				<div class="max-w-2xl mx-auto lg:mx-0">
					<h2
						class="text-3xl font-bold tracking-tight text-zinc-100 sm:text-4xl"
						transition:name={"Projects"}
					>
						Projects
					</h2>
				</div>
				<div class="w-full h-px bg-zinc-800"></div>

				<div class="grid grid-cols-1 gap-8 mx-auto lg:grid-cols-2">
					<ProjectCard>
						<a class="" href={`/projects/${featured?.id}`}>
							<article
								class="relative h-full w-full p-4 md:p-8"
								tabindex={-1}
							>
								<div
									class="flex justify-between gap-2 items-center"
								>
									<div class="text-xs text-zinc-100">
										{
											featured?.data.date ? (
												<time
													datetime={new Date(
														featured?.data.date,
													).toISOString()}
												>
													{Intl.DateTimeFormat(
														undefined,
														{
															dateStyle: "medium",
														},
													).format(
														new Date(
															featured?.data.date,
														),
													)}
												</time>
											) : (
												<span>SOON</span>
											)
										}
									</div>
								</div>

								<h2
									id="featured?-post"
									class="mt-4 text-3xl font-bold text-zinc-100 group-hover:text-white sm:text-4xl font-display"
									transition:name={"project-title-" +
										featured?.data.title}
								>
									{featured?.data.title}
								</h2>
								<p
									class="mt-4 leading-8 duration-150 text-zinc-400 group-hover:text-zinc-300"
									transition:name={"project-desc-" +
										featured?.data.title}
								>
									{featured?.data.description}
								</p>
								<div class="absolute bottom-4 md:bottom-8">
									<p
										class="text-zinc-200 hover:text-zinc-50 hidden lg:block"
									>
										Read more <span aria-hidden="true"
											>&rarr;</span
										>
									</p>
								</div>
							</article>
						</a>
					</ProjectCard>

					<div
						class="flex flex-col w-full gap-8 mx-auto border-t border-gray-900/10 lg:mx-0 lg:border-t-0"
					>
						{
							[top2, top3]
								.filter((project) => project !== undefined)
								.map((project) => (
									<ProjectCard>
										<Article
											id={project.id}
											project={project.data}
											views={0}
										/>
									</ProjectCard>
								))
						}
					</div>
				</div>
				<div class="hidden w-full h-px md:block bg-zinc-800"></div>

				<div
					class="grid grid-cols-1 gap-4 mx-auto lg:mx-0 md:grid-cols-3"
				>
					<div class="grid grid-cols-1 gap-4">
						{
							sorted
								.filter((_, i) => i % 3 === 0)
								.map((project) => (
									<ProjectCard key={project.id}>
										<Article
											id={project.id}
											project={project.data}
											views={0}
										/>
									</ProjectCard>
								))
						}
					</div>
					<div class="grid grid-cols-1 gap-4">
						{
							sorted
								.filter((_, i) => i % 3 === 1)
								.map((project) => (
									<ProjectCard key={project.id}>
										<Article
											id={project.id}
											project={project.data}
											views={0}
										/>
									</ProjectCard>
								))
						}
					</div>
					<div class="grid grid-cols-1 gap-4">
						{
							sorted
								.filter((_, i) => i % 3 === 2)
								.map((project) => (
									<ProjectCard key={project.id}>
										<Article
											id={project.id}
											project={project.data}
											views={0}
										/>
									</ProjectCard>
								))
						}
					</div>
				</div>
			</div>
		</div>
	</body>
</html>
